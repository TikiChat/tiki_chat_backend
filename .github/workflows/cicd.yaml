name: cicd-1
on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ master ]
    # paths: 
    # - 'src/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: dummy test
      run: |
        echo "test done"
    # - name: setup-node
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: 18
    # - name: cache Node.js module
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.npm
    #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #     restore-key: |
    #       ${{ runner.os }}-node-
    # - name: install dependencies
    #   run: |
    #     cd my-app
    #     npm ci
    # - name: npm build
    #   run: |
    #     cd my-app
    #     npm run build


  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout the code
      uses: actions/checkout@v4

    - name: ls
      run: |
        ls -al

    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: docker build & push
      run: |
        docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ image-build ]
    steps:
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Create mainkey.pem from secrets
        run: |
          echo "${{ secrets.MAINKEY_PEM }}" > mainkey.pem
          chmod 600 mainkey.pem

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ec2-54-253-245-207.ap-southeast-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH to EC2 instance
        run: |
          ssh -i mainkey.pem ubuntu@ec2-54-253-245-207.ap-southeast-2.compute.amazonaws.com
          ls -al
          
      - name: Remove mainkey.pem
        run: rm mainkey.pem

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [ image-build ]
  #   permissions:
  #       id-token: write
  #       contents: read
  #   steps:
  #   - name: checkout the code
  #     uses: actions/checkout@v4
  #   - name: configure AWS credentials
  #     id: credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with: 
  #       aws-regions: ${{ vars.REGION }}
  #       role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #   - name: setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: latest
  #   - name: setup helm
  #     uses: azure/setup-helm@v3
  #     with:
  #       version: v3.11.1
  #   - name: access kubernetes
  #     run: |
  #       aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
  #   - name: deploy
  #     id: status
  #     run: |
  #       helm upgrade --install my-app kubernetes/my-app --create-namespace --namespace my-app-${{ vars.SUFFIX }} \
  #       --set image.tag=${{ github.sha }} \
  #       --set image.repository=${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}
  #   - name: notify
  #     if: always()
  #     uses: slakcapi/slack-github-action@v1.24.0
  #     with:
  #       payload: |
  #         {
  #           "text": "message",
  #           "blocks": [
  #             {
  #               "type": "section",
  #               "text": {
  #                 "type": "mrkdwn",
  #                 "text": "Environment: dev, Deploy Result: ${{ steps.status.outcome }}, Repository: ${{ github.repository }}"
  #               }
  #             }
  #           ]
  #         }
  #     env: 
  #       SLAKC_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

