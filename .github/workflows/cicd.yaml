name: cicd-1
on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ master ]
    # paths: 
    # - 'src/**'

jobs:
  image-build:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4

    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: docker build
      run: |
        docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}

  image-run-test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    needs: [ image-build ]
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    - name: update docker-compose.yml
      run: |
        sed -i "/tikichat_server:/,/image: /s|image: .*|image: ${{ vars.REPOSITORY }}:${{ github.sha }}|g" docker-compose.yml
    - name: docker-compose up
      env:
        DB_ID: ${{ secrets.DB_ID }}
        DB_PW: ${{ secrets.DB_PW }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
        FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        GMAIL_SMTP_PASSWORD: ${{ secrets.GMAIL_SMTP_PASSWORD }}
        HOST: ${{ secrets.HOST }}
        PORT: ${{ secrets.PORT }}
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      timeout-minutes: 2
      run: |
        docker-compose up
    - name: dummy test
      run: |
        echo "test done"

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Create mainkey.pem from secrets
        run: |
          echo "${{ secrets.MAINKEY_PEM }}" > mainkey.pem
          chmod 600 mainkey.pem

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ec2-54-253-245-207.ap-southeast-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH to EC2 instance
        run: |
          ssh -i mainkey.pem ubuntu@ec2-54-253-245-207.ap-southeast-2.compute.amazonaws.com << 'EOF'
            ls -al
            ls ${{ github.sha }}
          EOF
        # sed -i "/tikichat_server:/,/image: /s|image: .*|image: dydydade/tikichat-server:${{ github.sha }}|g" docker-compose.yml
        # docker-compose down
        # sudo rm -r master_db
        # docker-compose up -d
          
      - name: Remove mainkey.pem
        run: rm mainkey.pem


