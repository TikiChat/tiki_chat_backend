name: ci
on:
  pull_request:
    types: [ opened, synchronize ]
    branches: [ master ]
    # paths: 
    # - 'src/**'

jobs:
  image-build:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4

    - name: create env.properties file
      run: |
        echo "DB_ID=${{ secrets.DB_ID }}" >> env.properties
        echo "DB_PW=${{ secrets.DB_PW }}" >> env.properties
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> env.properties
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> env.properties
        echo "FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}" >> env.properties
        echo "FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}" >> env.properties
        echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> env.properties
        echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> env.properties
        echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> env.properties
        echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> env.properties
        echo "GMAIL_SMTP_PASSWORD=${{ secrets.GMAIL_SMTP_PASSWORD }}" >> env.properties
        echo "HOST=${{ secrets.HOST }}" >> env.properties
        echo "PORT=${{ secrets.PORT }}" >> env.properties
        echo "KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}" >> env.properties
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> env.properties
        echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> env.properties
        echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> env.properties
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> env.properties
        mv env.properties src/main/resources/env.properties

    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: docker build
      run: |
        docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}

  image-run-test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    needs: [ image-build ]
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
      
    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: install docker compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: update docker-compose.yml
      run: |
        sed -i "/tikichat_server:/,/image: /s|image: .*|image: ${{ vars.REPOSITORY }}:${{ github.sha }}|g" docker-compose.yml

    - name: docker-compose up
      timeout-minutes: 2
      run: |
        docker-compose up -d

    # - name: wait for service
    #   run: |
    #     echo "Waiting for service to start..."
    #     sleep 60

    - name: Install wait-on
      run: |
        sudo apt-get install -y npm
        npm install -g wait-on

    - name: wait for service to be ready
      run: wait-on http://localhost:8080/actuator/health --timeout 60000

    # Optionally test if the container is running correctly (use curl or any other test you want)
    - name: test application
      run: |
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health)
        if [ $STATUS -ne 200 ]; then
          echo "Service is not healthy, status code: $STATUS"
          exit 1
        fi

    # Shut down docker-compose services
    - name: stop docker-compose
      run: docker-compose down


